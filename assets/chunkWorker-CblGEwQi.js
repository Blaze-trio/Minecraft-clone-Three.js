var C=Object.defineProperty;var y=(h,e,t)=>e in h?C(h,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):h[e]=t;var u=(h,e,t)=>y(h,typeof e!="symbol"?e+"":e,t);class M{constructor(e=Math.random()){u(this,"perm",new Uint8Array(512));u(this,"grad3",[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]]);const t=new Uint8Array(256);for(let a=0;a<256;a++)t[a]=a;let s=256,o,n;e=e||Math.random();let l=a=>{const c=Math.sin(a)*1e4;return c-Math.floor(c)};for(;s>0;)n=Math.floor(l(e*s)*s),s--,o=t[s],t[s]=t[n],t[n]=o,e=l(e);for(let a=0;a<512;a++)this.perm[a]=t[a&255]}noise2D(e,t){const s=Math.sin(e*.3+t*.7)*.5+.5,o=Math.sin(e*.5+t*.5)*.5+.5,n=Math.sin(e*.7+t*.3)*.5+.5;return(s+o+n)/1.5-.5}}class _{constructor(){u(this,"heightNoise");u(this,"caveNoise");u(this,"treeNoise");this.heightNoise=new M(123),this.caveNoise=new M(456),this.treeNoise=new M(789)}generateChunk(e,t){const s=new Map;for(let o=0;o<16;o++)for(let n=0;n<16;n++){const l=e*16+o,a=t*16+n,c=this.heightNoise.noise2D(l*.01,a*.01),i=Math.floor((c+1)*16)+32;for(let r=0;r<Math.min(i+1,64);r++){let N=0,f=!1;if(r<i-2&&r>5&&(f=this.caveNoise.noise2D(l*.05,a*.05+r*.1)>.4),!f&&r<=i&&(r===i&&i>40?N=1:r>i-4?N=2:N=3),N!==0){const E=`${o},${r},${n}`;s.set(E,{type:N,x:o,y:r,z:n})}}i>40&&this.treeNoise.noise2D(l*.1,a*.1)>.7&&this.generateTree(s,o,i+1,n)}return{x:e,z:t,blocks:Array.from(s.values()),isReady:!0}}generateTree(e,t,s,o){const n=4+Math.floor(Math.random()*2);for(let c=0;c<n;c++){const i=`${t},${s+c},${o}`;e.set(i,{type:4,x:t,y:s+c,z:o})}const l=s+n,a=2;for(let c=-2;c<=a;c++)for(let i=-2;i<=a;i++)for(let r=-1;r<=1;r++){if(c===0&&i===0&&r<=0)continue;if(Math.abs(c)+Math.abs(i)+Math.abs(r)<=3&&Math.random()>.2){const f=t+c,E=l+r,H=o+i;if(f>=0&&f<16&&E>=0&&E<64&&H>=0&&H<16){const g=`${f},${E},${H}`;e.has(g)||e.set(g,{type:5,x:f,y:E,z:H})}}}}}const p=new _;self.addEventListener("message",h=>{try{const e=h.data;switch(e.type){case"GENERATE_CHUNK":{const{chunkX:t,chunkZ:s,id:o}=e,n=p.generateChunk(t,s);self.postMessage({type:"CHUNK_GENERATED",chunk:n,id:o});break}case"GENERATE_CHUNKS_BATCH":{const{chunks:t}=e,s=t.map(({chunkX:o,chunkZ:n,id:l})=>({chunk:p.generateChunk(o,n),id:l}));self.postMessage({type:"CHUNKS_BATCH_GENERATED",results:s});break}}}catch(e){console.error("Error in chunk worker:",e),self.postMessage({type:"ERROR",error:e.message})}});self.postMessage({type:"WORKER_READY"});
